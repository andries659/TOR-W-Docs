{
  "version": 3,
  "sources": ["../../../../node_modules/hotkeys-js/dist/hotkeys.esm.js"],
  "sourcesContent": ["/**! \n * hotkeys-js v3.13.7 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2024 kenny wong <wowohoo@qq.com> \n * https://github.com/jaywcjlove/hotkeys-js.git \n * \n * @website: https://jaywcjlove.github.io/hotkeys-js\n \n * Licensed under the MIT license \n */\n\nconst isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), method);\n  }\n}\nfunction removeEvent(object, event, method, useCapture) {\n  if (object.removeEventListener) {\n    object.removeEventListener(event, method, useCapture);\n  } else if (object.detachEvent) {\n    object.detachEvent(\"on\".concat(event), method);\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  const mods = key.slice(0, key.length - 1);\n  for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  const keys = key.split(','); // 同时设置多个快捷键，以','分割\n  let index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  const arr1 = a1.length >= a2.length ? a1 : a2;\n  const arr2 = a1.length >= a2.length ? a2 : a1;\n  let isIndex = true;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nconst _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nconst _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nconst modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nconst _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nconst _handlers = {};\n\n// F1~F12 special key\nfor (let k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nlet _downKeys = []; // 记录摁下的绑定键\nlet winListendFocus = null; // window是否已经监听了focus事件\nlet _scope = 'all'; // 默认热键范围\nconst elementEventMap = new Map(); // 已绑定事件的节点记录\n\n// 返回键码\nconst code = x => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\nconst getKey = x => Object.keys(_keyMap).find(k => _keyMap[k] === x);\nconst getModifier = x => Object.keys(_modifier).find(k => _modifier[k] === x);\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(c => getKey(c) || getModifier(c) || String.fromCharCode(c));\n}\nfunction getAllKeyCodes() {\n  const result = [];\n  Object.keys(_handlers).forEach(k => {\n    _handlers[k].forEach(_ref => {\n      let {\n        key,\n        scope,\n        mods,\n        shortcut\n      } = _ref;\n      result.push({\n        scope,\n        shortcut,\n        mods,\n        keys: key.split('+').map(v => code(v))\n      });\n    });\n  });\n  return result;\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  const target = event.target || event.srcElement;\n  const {\n    tagName\n  } = target;\n  let flag = true;\n  const isInput = tagName === 'INPUT' && !['checkbox', 'radio', 'range', 'button', 'file', 'reset', 'submit', 'color'].includes(target.type);\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  let handlers;\n  let i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (const key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) {\n          const deleteItems = handlers.splice(i, 1);\n          deleteItems.forEach(_ref2 => {\n            let {\n              element\n            } = _ref2;\n            return removeKeyEvent(element);\n          });\n        } else {\n          i++;\n        }\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  let key = event.keyCode || event.which || event.charCode;\n  const i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(key => {\n      Array.isArray(_handlers[key]) && _handlers[key].forEach(info => eachUnbind(info));\n      delete _handlers[key];\n    });\n    removeKeyEvent(null);\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(info => {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    let [scope, method] = args;\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope,\n      method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nconst eachUnbind = _ref3 => {\n  let {\n    key,\n    scope,\n    method,\n    splitKey = '+'\n  } = _ref3;\n  const multipleKeys = getKeys(key);\n  multipleKeys.forEach(originKey => {\n    const unbindKeys = originKey.split(splitKey);\n    const len = unbindKeys.length;\n    const lastKey = unbindKeys[len - 1];\n    const keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    const unbindElements = [];\n    _handlers[keyCode] = _handlers[keyCode].filter(record => {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      const isMatchingMethod = method ? record.method === method : true;\n      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);\n      if (isUnbind) unbindElements.push(record.element);\n      return !isUnbind;\n    });\n    unbindElements.forEach(element => removeKeyEvent(element));\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  let modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (const y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  const asterisk = _handlers['*'];\n  let key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(keyName => {\n    const keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (const k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (const e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  const scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (let i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  const handlerKey = _handlers[key];\n  const keyLen = handlerKey.length;\n  for (let i = 0; i < keyLen; i++) {\n    if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {\n      if (handlerKey[i].key) {\n        const record = handlerKey[i];\n        const {\n          splitKey\n        } = record;\n        const keyShortcut = record.key.split(splitKey);\n        const _downKeysCurrent = []; // 记录当前按键键值\n        for (let a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  const keys = getKeys(key); // 需要处理的快捷键列表\n  let mods = [];\n  let scope = 'all'; // scope默认为all，所有范围都有效\n  let element = document; // 快捷键事件绑定节点\n  let i = 0;\n  let keyup = false;\n  let keydown = true;\n  let splitKey = '+';\n  let capture = false;\n  let single = false; // 单个callback\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n    if (option.single === true) single = true; // eslint-disable-line\n  }\n  if (typeof option === 'string') scope = option;\n\n  // 如果只允许单个callback，先unbind\n  if (single) unbind(key, scope);\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup,\n      keydown,\n      scope,\n      mods,\n      shortcut: keys[i],\n      method,\n      key: keys[i],\n      splitKey,\n      element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && window) {\n    if (!elementEventMap.has(element)) {\n      const keydownListener = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        return dispatch(event, element);\n      };\n      const keyupListenr = function () {\n        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n        dispatch(event, element);\n        clearModifier(event);\n      };\n      elementEventMap.set(element, {\n        keydownListener,\n        keyupListenr,\n        capture\n      });\n      addEvent(element, 'keydown', keydownListener, capture);\n      addEvent(element, 'keyup', keyupListenr, capture);\n    }\n    if (!winListendFocus) {\n      const listener = () => {\n        _downKeys = [];\n      };\n      winListendFocus = {\n        listener,\n        capture\n      };\n      addEvent(window, 'focus', listener, capture);\n    }\n  }\n}\nfunction trigger(shortcut) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(key => {\n    const dataList = _handlers[key].filter(item => item.scope === scope && item.shortcut === shortcut);\n    dataList.forEach(data => {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\n\n// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听\nfunction removeKeyEvent(element) {\n  const values = Object.values(_handlers).flat();\n  const findindex = values.findIndex(_ref4 => {\n    let {\n      element: el\n    } = _ref4;\n    return el === element;\n  });\n  if (findindex < 0) {\n    const {\n      keydownListener,\n      keyupListenr,\n      capture\n    } = elementEventMap.get(element) || {};\n    if (keydownListener && keyupListenr) {\n      removeEvent(element, 'keyup', keyupListenr, capture);\n      removeEvent(element, 'keydown', keydownListener, capture);\n      elementEventMap.delete(element);\n    }\n  }\n  if (values.length <= 0 || elementEventMap.size <= 0) {\n    // 移除所有的元素上的监听\n    const eventKeys = Object.keys(elementEventMap);\n    eventKeys.forEach(el => {\n      const {\n        keydownListener,\n        keyupListenr,\n        capture\n      } = elementEventMap.get(el) || {};\n      if (keydownListener && keyupListenr) {\n        removeEvent(el, 'keyup', keyupListenr, capture);\n        removeEvent(el, 'keydown', keydownListener, capture);\n        elementEventMap.delete(el);\n      }\n    });\n    // 清空 elementEventMap\n    elementEventMap.clear();\n    // 清空 _handlers\n    Object.keys(_handlers).forEach(key => delete _handlers[key]);\n    // 移除window上的focus监听\n    if (winListendFocus) {\n      const {\n        listener,\n        capture\n      } = winListendFocus;\n      removeEvent(window, 'focus', listener, capture);\n      winListendFocus = null;\n    }\n  }\n}\nconst _api = {\n  getPressedKeyString,\n  setScope,\n  getScope,\n  deleteScope,\n  getPressedKeyCodes,\n  getAllKeyCodes,\n  isPressed,\n  filter,\n  trigger,\n  unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap\n};\nfor (const a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  const _hotkeys = window.hotkeys;\n  hotkeys.noConflict = deep => {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\n\nexport { hotkeys as default };\n"],
  "mappings": "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",
  "names": []
}
